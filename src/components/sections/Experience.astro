---
import { getCollection, type CollectionEntry } from "astro:content";

const items = (await getCollection("experiences"))
  .filter((e: CollectionEntry<"experiences">) => !e.data.draft)
  .sort(
    (a: CollectionEntry<"experiences">, b: CollectionEntry<"experiences">) =>
      (b.data.order ?? 0) - (a.data.order ?? 0)
  );
---

<section id="experience" class="px-4 md:px-20 py-20 scroll-mt-24 md:scroll-mt-32 max-w-3xl mx-auto">
  <div class="italic mb-6 self-start font-['Instrument_Serif']
           text-4xl md:text-5xl">
    Experience
  </div>

  <h2 class="mt-3 font-['Instrument_Serif'] text-[clamp(1.75rem,3.2vw,2.5rem)] leading-tight">
    A Proven Track Record of Design Excellence
  </h2>

  <ul class="mt-6 flex flex-col gap-3 md:gap-4 max-w-2xl">
    {items.map((entry: CollectionEntry<'experiences'>) => (
      <li
        class="group flex items-center gap-4 rounded-2xl bg-white border border-black/10
               shadow-[0_1px_1px_rgba(0,0,0,.04),0_10px_24px_rgba(0,0,0,.06)]
               px-4 py-3 md:px-5 md:py-4 transition hover:-translate-y-[2px]"
      >
        <div class={`shrink-0 grid place-items-center rounded-xl w-16 h-16 md:w-24 md:h-24 ${entry.data.logoBg ?? ""} overflow-hidden`}>
          <img src={entry.data.logo} alt={entry.data.company} class="w-12 h-12 md:w-16 md:h-16" />
        </div>

        <div class="min-w-0">
          <p class="font-['Instrument_Serif'] text-[1.25rem] md:text-[1.7rem]">
            <span class="font-medium">{entry.data.role}</span>
            <span class="text-gray-700"> at </span>
            <span class="font-medium">{entry.data.company}</span>
          </p>
          <p class="text-gray-500 text-sm md:text-lg mt-0.5">
            {entry.data.start} â€” {entry.data.end}
          </p>
        </div>
      </li>
    ))}
  </ul>
</section>

<script>
  import { animate, inView, stagger } from "motion";
  inView("#experience", (el) => {
    const pill = el.querySelector("div.inline-flex");
    const h2 = el.querySelector("h2");
    const cards = el.querySelectorAll("li");

    pill && animate(pill, { opacity:[0,1], transform:["translateY(8px)", "translateY(0)"] } as any, { duration:.6, easing:"ease-out" } as any);
    h2 && animate(h2, { opacity:[0,1], transform:["translateY(10px)", "translateY(0)"] } as any, { duration:.7, easing:"ease-out", delay:.1 } as any);

    if (cards.length) {
      setTimeout(() => {
        animate(cards, { opacity:[0,1], transform:["translateY(12px)", "translateY(0)"] } as any,
          { delay: stagger(.1), duration:.5, easing:"cubic-bezier(.22,1,.36,1)" } as any
        );
      }, 150);
    }
  });
</script>
