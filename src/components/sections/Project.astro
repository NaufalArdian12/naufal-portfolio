---
import { getCollection, type CollectionEntry } from 'astro:content'

const items = (await getCollection('projects'))
  .filter((p: CollectionEntry<'projects'>) => !p.data.draft)
  .sort(
    (a: CollectionEntry<'projects'>, b: CollectionEntry<'projects'>) =>
      (b.data.featured ? 1 : 0) - (a.data.featured ? 1 : 0) ||
      (b.data.order ?? 0) - (a.data.order ?? 0)
  )
---
<section id="project" class="px-4 md:px-20 py-20">
  <h2 class="text-5xl italic font-normal font-[Instrument_Serif] mb-6">Projects</h2>

  <div class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3">
    {items.map((entry: CollectionEntry<'projects'>) => (
      <article class="rounded-2xl p-4 hover:shadow-lg transition bg-white border border-gray-200">
        {entry.data.cover && (
          <img
            src={entry.data.cover}
            alt={entry.data.title}
            class="mb-3 aspect-video w-full rounded-lg object-cover"
          />
        )}
        <h3 class="text-lg font-semibold">{entry.data.title}</h3>
        <p class="mt-1 text-sm text-gray-600">
          {entry.data.description}
        </p>

        <div class="mt-3 flex flex-wrap gap-2">
          {entry.data.tags?.map((t: string) => (
            <span class="text-sm rounded-full border px-2 py-1 hover:bg-[#0048BF] hover:text-white">{t}</span>
          ))}
        </div>

        <div class="mt-4 flex gap-3">
          {entry.data.demoUrl && (
            <a class="text-sm underline" href={entry.data.demoUrl} target="_blank" rel="noopener">
              Live
            </a>
          )}
          {entry.data.repoUrl && (
            <a class="text-sm underline" href={entry.data.repoUrl} target="_blank" rel="noopener">
              Repo
            </a>
          )}
        </div>
      </article>
    ))}
  </div>
</section>
